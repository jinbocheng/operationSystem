{\rtf1\ansi\ansicpg936\cocoartf2758
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\li640\fi640\sl480\qj\partightenfactor0

\f0\fs32 \cf2 \expnd0\expndtw0\kerning0
use crate::sync::UPSafeCell;
\f1\fs28 \

\f0\fs32 use super::TaskControlBlock;
\f1\fs28 \

\f0\fs32 use alloc::collections::VecDeque;
\f1\fs28 \

\f0\fs32 use alloc::sync::Arc;
\f1\fs28 \

\f0\fs32 use lazy_static::*;
\f1\fs28 \

\f0\fs32 \'a0
\f1\fs28 \

\f0\fs32 pub struct TaskManager \{
\f1\fs28 \

\f0\fs32 \'a0\'a0\'a0 ready_queue: VecDeque<Arc<TaskControlBlock>>,
\f1\fs28 \

\f0\fs32 \}
\f1\fs28 \

\f0\fs32 \'a0
\f1\fs28 \

\f0\fs32 /// A simple FIFO scheduler.
\f1\fs28 \

\f0\fs32 impl TaskManager \{
\f1\fs28 \

\f0\fs32 \'a0\'a0\'a0 pub fn new() -> Self \{
\f1\fs28 \

\f0\fs32 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 Self \{ ready_queue: VecDeque::new(), \}
\f1\fs28 \

\f0\fs32 \'a0\'a0\'a0 \}
\f1\fs28 \

\f0\fs32 \'a0\'a0\'a0 pub fn add(&mut self, task: Arc<TaskControlBlock>) \{
\f1\fs28 \

\f0\fs32 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 self.ready_queue.push_back(task);
\f1\fs28 \

\f0\fs32 \'a0\'a0\'a0 \}
\f1\fs28 \

\f0\fs32 \'a0\'a0\'a0 pub fn fetch(&mut self) -> Option<Arc<TaskControlBlock>> \{
\f1\fs28 \

\f0\fs32 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 self.ready_queue.pop_front()
\f1\fs28 \

\f0\fs32 \'a0\'a0\'a0 \}
\f1\fs28 \

\f0\fs32 \}
\f1\fs28 \

\f0\fs32 \'a0
\f1\fs28 \

\f0\fs32 lazy_static! \{
\f1\fs28 \

\f0\fs32 \'a0\'a0\'a0 pub static ref TASK_MANAGER: UPSafeCell<TaskManager> = unsafe \{
\f1\fs28 \

\f0\fs32 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 UPSafeCell::new(TaskManager::new())
\f1\fs28 \

\f0\fs32 \'a0\'a0\'a0 \};
\f1\fs28 \

\f0\fs32 \}
\f1\fs28 \

\f0\fs32 \'a0
\f1\fs28 \

\f0\fs32 pub fn add_task(task: Arc<TaskControlBlock>) \{
\f1\fs28 \

\f0\fs32 \'a0\'a0\'a0 TASK_MANAGER.exclusive_access().add(task);
\f1\fs28 \

\f0\fs32 \}
\f1\fs28 \

\f0\fs32 \'a0
\f1\fs28 \

\f0\fs32 pub fn fetch_task() -> Option<Arc<TaskControlBlock>> \{
\f1\fs28 \

\f0\fs32 \'a0\'a0\'a0 TASK_MANAGER.exclusive_access().fetch()
\f1\fs28 \

\f0\fs32 \}
\f1\fs28 \
}